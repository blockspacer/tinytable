#include "sign.h"
#include <string.h>

/*unsigned long cryptTable[0x500];

// this func is used to create table
void generateHashtable() {  
    unsigned long seed = 0x00100001, index1 = 0, index2 = 0, i;  
    for( index1 = 0; index1 < 0x100; ++index1) {  
        for( index2 = index1, i = 0; i < 5; i++, index2 += 0x100) {  
            unsigned long temp1, temp2;  
            seed = (seed * 125 + 3) % 0x2AAAAB;  
            temp1 = (seed & 0xFFFF)<<0x10;  
            seed = (seed * 125 + 3) % 0x2AAAAB;  
            temp2 = (seed & 0xFFFF);  
            cryptTable[index2] = ( temp1 | temp2 );  
        }  
    }  
}*/  

// the table is created according to the above function
unsigned int cryptTable_0[256] = {
    1439053538, 46006640, 1481339348, 696578062, 3062024201, 2446296939, 2002426916, 1501387941, 1511718578, 3555315213, 852348408, 2978087373, 1020134862, 2774340542, 3138059889, 2474027827,
    2223989854, 2279889477, 1169711127, 1583705256, 461707925, 625138647, 2874014180, 1500950171, 1815182973, 3453824916, 1010570213, 861606769, 832934602, 1373961292, 4158348079, 2327690817,
    2347411060, 550941465, 3731659421, 3316417765, 1146773483, 2492828848, 511522887, 4082969008, 3395079898, 3073558709, 4258021853, 249359382, 2634153646, 291885966, 2665583560, 3207835964,
    1639714300, 4013849577, 4174697669, 3348854420, 1512397123, 188600842, 2635773347, 3483941463, 1584230505, 3414800177, 1036046683, 223182462, 2548268843, 4277939121, 4183496373, 665148307,
    1173497641, 1285056048, 2087086178, 1604585543, 2750505477, 2031843172, 946550486, 1852588015, 3344455131, 1253866951, 1244827547, 3471969295, 1622707975, 4156246927, 2198557074, 2499219948,
    539297618, 966599075, 3854599181, 3882680229, 1649388329, 1576088550, 2212542904, 3313069051, 1249555152, 3126437921, 61349452, 3443187675, 850553740, 2385888563, 2657288425, 2365139653,
    2282559723, 320492467, 785570916, 2989643713, 2690928833, 462605198, 1928164110, 430343664, 2189649027, 1121537674, 4003190518, 1433209706, 3127203994, 3726953700, 1395826540, 3344236171,
    1346186695, 268598180, 3551922827, 1759939971, 177285289, 1499439967, 184792510, 352994756, 2976029902, 3858188667, 2322634916, 3089317481, 2392914296, 1532467568, 3937485592, 1260958307,
    3061214447, 108537975, 358378960, 3339793212, 4162440927, 15408488, 3607100014, 1134451042, 3613775579, 3406548713, 1832670791, 2522113779, 212435913, 1961673166, 4228211638, 1118867438,
    3316877395, 4266667243, 2068000687, 3272205840, 741971928, 1131890260, 364748076, 3983163917, 3355398668, 3098116049, 1582129356, 3111357713, 3659629055, 1940661655, 982445197, 2894456697,
    4093212118, 3120462737, 253058334, 677426909, 2203678667, 2959111222, 2628484971, 2327384454, 3240841705, 537415307, 1153076909, 2772611376, 2193413572, 3430186830, 253299160, 3659804188,
    1870469792, 3529663622, 2295363614, 2875808973, 4199977285, 3036591452, 3192383638, 3876223624, 3579938210, 2901723249, 153625394, 501148328, 1493990107, 4104746599, 3218626309, 245857484,
    2851623780, 2199476329, 2348483610, 3682873180, 3606115093, 2809491111, 173126713, 2850945187, 3641200175, 2188642296, 3568075396, 158571789, 3015404796, 3577333629, 1807522496, 902185386,
    2471270064, 3514495767, 700889839, 2994064812, 3609617118, 2673616196, 3249114997, 3649998746, 1203592326, 1892028582, 3041406676, 599377548, 1008447078, 1767206527, 3640849888, 1698503003,
    3731177979, 129812140, 3337516936, 2148873428, 740242880, 3655229773, 3184307333, 3033833690, 606950555, 2643871638, 3117332866, 1509595561, 3633867969, 2660286881, 29087791, 3622946301,
    3716447930, 2285711453, 636563794, 1251109197, 2012341761, 2149902055, 44430653, 2621371609, 2940222668, 3802989504, 1190000364, 1872483302, 3424955770, 1202694930, 2183761399, 1888263916
};

unsigned int cryptTable_1[256] = {
    1996014001, 3012843986, 1058940633, 3783334887, 1458379853, 3385953016, 3894937102, 2445990446, 1556871607, 4054143700, 1016939331, 3774908293, 719318719, 4177674400, 1023986919, 1114533808,
    1463588943, 329794478, 1080783929, 1667270105, 1342225050, 2907326379, 2936020365, 1100548014, 408719254, 3857313101, 1635139891, 3547348375, 2895704262, 3687031676, 2247102660, 2420710962,
    4046330047, 3364656865, 3556497113, 3821177608, 3586066636, 2984740953, 625401295, 2955981312, 2868717585, 1437740321, 3549164903, 1184660011, 1523603346, 2711984158, 2113635204, 886163978,
    2125519840, 3592216822, 964716727, 3862981919, 2511235911, 3827831344, 2961453153, 2802465384, 3812685349, 1927069693, 2394468301, 414606879, 401562204, 809762, 1805727798, 1634067331,
    1950882907, 3849258769, 2725204004, 1609707104, 832956457, 2701741040, 3330337900, 2364745687, 3958453386, 1780645167, 1946571140, 2381730066, 733808110, 3838840534, 696315418, 1793186419,
    3896906970, 1821968043, 3482190555, 3547479703, 2465623215, 2894369223, 2932233878, 3112802255, 4195796834, 1836303967, 542974630, 1305717413, 770403264, 2671208556, 1906649131, 929806816,
    2147428891, 3731331119, 2629776334, 778939191, 1848911033, 249643964, 2200592601, 3143838177, 334937853, 1499855748, 4127925052, 1030312323, 1127359649, 3050949349, 2185599915, 2669785873,
    2943111751, 3024597306, 2066118339, 3280566733, 2233904677, 3310398811, 1750112679, 1709818557, 3855014966, 3775608745, 2281793656, 3464615140, 618069120, 1090917677, 1833918352, 3302782142,
    3678955372, 1823828407, 4089403791, 69929177, 46969566, 2969923429, 1201228532, 4195621796, 2474027822, 128411447, 1978132220, 1151172769, 62334365, 4141823370, 1517671865, 1193830691,
    991572207, 4005444970, 2645666304, 8032473, 610693233, 27030479, 1761844173, 2509244228, 1696117227, 1761997314, 3996733874, 3779198121, 2038409266, 1519773019, 3592829717, 1533146004,
    2306525980, 6259625, 574754673, 4103411566, 2115211069, 328393604, 926676906, 2387683350, 2841686986, 74766156, 4289517271, 787869086, 1620650666, 2120814233, 599815325, 3638726917,
    1432181001, 358816766, 2795264540, 1343231946, 2571337800, 947075783, 3867337416, 3563413462, 2507033604, 880670275, 793450363, 2481797796, 2810060245, 2061850370, 3534041049, 4018905484,
    3084108270, 2155395725, 2874845915, 1965809807, 109785537, 126529084, 2858058563, 306025064, 753593923, 2394796601, 1694650867, 76035656, 2355290414, 313729383, 3843108506, 268445000,
    1048215949, 125719335, 4047555617, 1827133277, 2610559397, 840266780, 3064650670, 1938254044, 2191750191, 1985048608, 3716623064, 2634613426, 2098883332, 1228412306, 1671844517, 202761766,
    3794759894, 31998853, 2996691252, 549781518, 3915510851, 758212142, 1021754408, 888790420, 4198882899, 1232439485, 2489852251, 125303388, 1869681856, 3773310612, 3828816262, 1460743650,
    3771384457, 4070821600, 1782702521, 3217991549, 4180147538, 1769242008, 3198643419, 2379453783, 81485518, 705201608, 1004857582, 567772636, 165575694, 844687923, 1368533378, 4002271268
};

unsigned long sign32_0(const char *str, int len)  
{  
    unsigned char *key  = (unsigned char *)str;  
    unsigned long seed1 = 0x7FED7FED;  
    unsigned long seed2 = 0xEEEEEEEE;  
    int ch;  

    for (int i = 0; i < len; ++i) {
        ch = *key++;
        seed1 = cryptTable_0[(unsigned int)ch] ^ (seed1 + seed2);  
        seed2 = ch + seed1 + seed2 + (seed2<<5) + 3;  
    }  
    return seed1;  
}

unsigned long sign32_1(const char *str, int len)  
{  
    unsigned char *key  = (unsigned char *)str;  
    unsigned long seed1 = 0x7FED7FED;  
    unsigned long seed2 = 0xEEEEEEEE;  
    int ch;  

    for (int i = 0; i < len; ++i) {
        ch = *key++;
        seed1 = cryptTable_1[ch] ^ (seed1 + seed2);  
        seed2 = ch + seed1 + seed2 + (seed2<<5) + 3;  
    }  
    return seed1;  
}

uint64_t get_sign64(const char* str, int len) {
    uint64_t sign = 0;
    unsigned int* sign1 = (unsigned int*)&sign;
    unsigned int* sign2 = (unsigned int*)(4 + (char*)sign1);
    if( len <= 4 ) {
        memcpy(sign1, str, len);
        return sign;
    } else {
        if(len<=8) {
            memcpy(sign1, str, 4);
            memcpy(sign2, str+4, len-4);
            return sign;
        } else {
            (*sign1)= sign32_0(str, len);
            (*sign2)= sign32_1(str, len);
            return sign;
        }
    }
}

uint32_t get_sign32(const char* str, int len) {
    return sign32_0(str, len);
}












